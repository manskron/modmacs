#+title: GNU Emacs configuration
#+author: Måns Bülling
#+email: quick.beach7778@fastmail.com
#+language: en
#+options: ':t toc:nil num:t author:t email:t
#+startup: content indent
#+macro: latest-export-date (eval (format-time-string "%F %T %z"))
#+macro: word-count (eval (count-words (point-min) (point-max)))

*Last revised and exported on {{{latest-export-date}}} with a word
count of {{{word-count}}}.*

+ Website: <https://mans.computer>
+ Git repositories:
  - GitHub: <https://github.com/manskron/modmacs>
    
* Emacs settings

Hide scroll bar, tool bar and menu bar. Don't do this if you are new to emacs.
It is a fantastic way to discover functionality and keybindings.
#+begin_src emacs-lisp :tangle "init.el"
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

Highlight the active line.
#+begin_src emacs-lisp :tangle "init.el"
  (hl-line-mode t)
#+end_src

Hide line numbers. These are mostly only needed when pair programming.
#+begin_src emacs-lisp :tangle "init.el"
  (global-display-line-numbers-mode -1)
#+end_src

Refresh buffer if the underlying file changes.
#+begin_src emacs-lisp :tangle "init.el"
  (global-auto-revert-mode 1)
#+end_src

Enable recent files
#+begin_src emacs-lisp :tangle "init.el"
  (recentf-mode 1)
#+end_src

Restore last cursor location in previously opened files
#+begin_src emacs-lisp :tangle "init.el"
  (save-place-mode 1)
#+end_src

Start in fullscreen
#+begin_src emacs-lisp :tangle "init.el"
  (add-hook 'window-setup-hook 'toggle-frame-fullscreen t)
#+end_src

Display time the way I like it.
#+begin_src emacs-lisp :tangle "init.el"
  (display-time-mode 1)
  (format-time-string "%H:%M")
#+end_src

Hightlight matching parens
#+begin_src emacs-lisp :tangle "init.el"
  (show-paren-mode 1)
#+end_src

Make confirmation prompts comfortable
#+begin_src emacs-lisp :tangle "init.el"
  (fset 'yes-or-no-p 'y-or-n-p) ; y-or-n-p makes answering questions faster
#+end_src

Enable typescript-ts-mode for .tsx files
#+begin_src emacs-lisp :tangle "init.el"
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . typescript-ts-mode))
#+end_src

Follow symlinks
#+begin_src emacs-lisp :tangle "init.el"
  (setq vc-follow-symlinks t)
#+end_src

Point to tree-sitter grammars
#+begin_src emacs-lisp :tangle "init.el"
  (setq treesit-extra-load-path '("~/tree-sitter-module/dist"))
#+end_src

Refresh dired when files change
#+begin_src emacs-lisp :tangle "init.el"
  (setq  global-auto-revert-non-file-buffers t)
#+end_src

Start with a scratch buffer
#+begin_src emacs-lisp :tangle "init.el"
  (setq  inhibit-startup-message t)
#+end_src

Font size
#+begin_src emacs-lisp :tangle "init.el"
  (set-face-attribute 'default nil
                      :height 150)
#+end_src

Send custom.el to oblivion
#+begin_src emacs-lisp :tangle "init.el"
  (setq custom-file (make-temp-file "emacs-custom-"))
#+end_src

Don't create backups and lockfiles
#+begin_src emacs-lisp :tangle "init.el"
  (setq make-backup-files nil)
  (setq backup-inhibited nil) ; Not sure if needed, given `make-backup-files'
  (setq create-lockfiles nil)
#+end_src
* Package init

#+begin_src emacs-lisp :tangle "init.el"
  (require 'package)

  (setq package-archives
        '(("melpa" . "https://melpa.org/packages/")
          ("melpa-stable" . "https://stable.melpa.org/packages/")
          ("org" . "https://orgmode.org/elpa/")
          ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* Theme

#+begin_src emacs-lisp :tangle "init.el"
  (use-package modus-themes)
#+end_src

#+begin_src emacs-lisp :tangle "init.el"
  (use-package solar 
    :ensure nil
    :config
    (setq calendar-latitude 59.32
          calendar-longitude 18.06))
#+end_src

#+begin_src emacs-lisp :tangle "init.el"
  (use-package circadian
    :after solar
    :config
    (setq circadian-themes '((:sunrise . modus-operandi-tinted)
                             (:sunset  . modus-vivendi-tinted)))
    (circadian-setup))
#+end_src

* Keybindings

#+begin_src emacs-lisp :tangle "init.el"
  (use-package general
    :config
    (general-define-key
     :states '(emacs insert normal)
     :prefix-map 'modmacs-prefix-map
     :global-prefix "C-c"
     :non-normal-prefix "M-SPC"
     :prefix "SPC")

    (general-create-definer modmacs 
      :keymaps 'modmacs-prefix-map)

    (modmacs 
      "SPC" 'switch-to-buffer
      ";" 'vterm-toggle
      "," '("config" . (keymap))
      ",o" 'open-config
      ",l" 'reload-config
      ",t" 'tangle-config
      "b" '("buffer" . (keymap))
      "bd" 'kill-this-buffer
      "be" 'eval-buffer
      "bi" 'ibuffer
      "c" '("code" . (keymap))
      "cf" 'dom-indent-buffer
      "f" '("file" . (keymap))
      "fr" 'recentf
      "fs" 'save-buffer
      "g" '("git" . (keymap))
      "gs" 'magit
      "p" '("project" . (keymap))
      "pd" 'project-dired
      "pf" 'project-find-file
      "pp" 'project-switch-project
      "pb" 'project-list-buffers
      "ps" 'consult-ripgrep
      "p." 'project-async-shell-command
      "w" '("window" . (keymap))
      "w/" 'split-window-right
      "w-" 'split-window-below
      "wd" 'delete-window
      "wr" 'restart-emacs
      "wl" 'evil-window-right
      "wh" 'evil-window-left
      "wk" 'evil-window-up
      "wj" 'evil-window-down
      "wt" 'vterm-other-window
      ))
#+end_src

* Packages
** Dired
#+begin_src emacs-lisp :tangle "init.el"
  (use-package dired
    :ensure nil
    :hook ((dired-mode . hl-line-mode)
           (dired-mode . dired-hide-details-mode))
    ;; Avoid having to q myself to death
    :config (setf dired-kill-when-opening-new-dired-buffer t)
    :general
    (:states 'normal
             :prefix ","
             "d" '(lambda() (interactive) (dired default-directory)))
    (:states 'normal
             :keymaps 'dired-mode-map
             "j" 'dired-next-line
             "k" 'dired-previous-line
             "h" 'dired-up-directory
             "l" 'dired-find-file
             "yy" 'dired-do-copy
             "yn" 'dired-copy-filename-as-kill
             "m" 'dired-mark
             "u" 'dired-unmark
             "t" 'dired-toggle-marks
             "v" 'dired-display-file
             "cw" 'dired-do-rename
             "r" 'revert-buffer
             "nd" 'dired-create-directory
             "nf" 'dired-create-empty-file
             "s" 'dired-do-async-shell-command
             ))
#+end_src

** LSP
#+begin_src emacs-lisp :tangle "init.el"
  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")
    :hook (
           (typescript-ts-mode . lsp)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)
#+end_src




#+begin_src emacs-lisp :tangle "init.el"
  (use-package lsp-ui :commands lsp-ui-mode)
#+end_src

** which-key
#+begin_src emacs-lisp :tangle "init.el"
  (use-package which-key
    :init
    (setq which-key-idle-delay 0)
    (which-key-mode)
    :diminish which-key-mode)
#+end_src

** Evil
#+begin_src emacs-lisp :tangle "init.el"
  (use-package evil
    :config
    (evil-set-initial-state 'eww-mode 'emacs)
    (evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)
    :init
    (setq evil-want-C-i-jump nil)
    :hook
    ((prog-mode) . evil-mode)
    )
#+end_src
** Magit
#+begin_src emacs-lisp :tangle "init.el"
  (use-package magit)
#+end_src
** Web Dev
*** Nvm
#+begin_src emacs-lisp :tangle "init.el"
  (use-package nvm)
#+end_src
*** Prettier
#+begin_src emacs-lisp :tangle "init.el"
  (use-package prettier-js)
#+end_src
** Orderless
#+begin_src emacs-lisp :tangle "init.el"
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))

#+end_src

** Consult
#+begin_src emacs-lisp :tangle "init.el"
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element
    )
#+end_src

** Marginalia
#+begin_src emacs-lisp :tangle "init.el"
  (use-package marginalia
    :init
    (marginalia-mode))
#+end_src

** Vertico
#+begin_src emacs-lisp :tangle "init.el"
  (use-package vertico
    :init
    (vertico-mode))
#+end_src

** vterm
#+begin_src emacs-lisp :tangle "init.el"
  (use-package vterm)
#+end_src

Steal the vterm toggle func from doom emacs
#+begin_src emacs-lisp :tangle "init.el"
  (use-package vterm-toggle)
#+end_src

* Custom functions
#+begin_src emacs-lisp :tangle "init.el"
  ;; Custom functions 
  (defun open-config ()
    "Opens my config."
    (interactive) (find-file "~/modmacs/modmacs.org"))

  (defun tangle-config ()
    "Tangles my config."
    (interactive) (org-babel-tangle "~/modmacs/modmacs.org"))

  (defun reload-config ()
    "Reloads my config."
    (interactive) (load-file "~/modmacs/init.el"))

  (defun dom-indent-buffer ()
    (interactive)
    (save-excursion
      (indent-region (point-min) (point-max) nil)))
#+end_src

